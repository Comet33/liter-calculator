<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>